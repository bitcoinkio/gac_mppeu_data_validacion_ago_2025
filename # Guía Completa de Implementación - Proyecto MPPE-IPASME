# Guía Completa de Implementación - Proyecto MPPE-IPASME

Esta guía proporciona instrucciones paso a paso para implementar completamente el proyecto de cruce de datos de nómina MPPE e IPASME, desde la configuración inicial hasta la puesta en producción.

## Tabla de Contenidos

1. [Requisitos del Sistema](#requisitos-del-sistema)
2. [Configuración del Entorno](#configuración-del-entorno)
3. [Configuración de la Base de Datos](#configuración-de-la-base-de-datos)
4. [Configuración de Google Drive](#configuración-de-google-drive)
5. [Implementación del Código](#implementación-del-código)
6. [Importación de Datos](#importación-de-datos)
7. [Configuración de Notion](#configuración-de-notion)
8. [Configuración de GitHub](#configuración-de-github)
9. [Pruebas y Validación](#pruebas-y-validación)
10. [Puesta en Producción](#puesta-en-producción)
11. [Mantenimiento](#mantenimiento)

## Requisitos del Sistema

### Hardware Mínimo

- **CPU:** 4 núcleos, 2.5 GHz
- **RAM:** 8 GB (recomendado 16 GB para archivos grandes)
- **Almacenamiento:** 500 GB disponibles
- **Red:** Conexión estable a internet

### Software Requerido

- **Sistema Operativo:** Windows 10/11, Ubuntu 20.04+, macOS 10.15+
- **MySQL Server:** 8.0 o superior
- **Python:** 3.8 o superior
- **Git:** Última versión
- **MySQL Workbench:** (Opcional, para administración visual)

### Cuentas y Servicios

- Cuenta de GitHub (con permisos para crear repositorios)
- Cuenta de Google Drive (con espacio suficiente para archivos de 80MB+)
- Cuenta de Notion (plan Pro recomendado para colaboración)

## Configuración del Entorno

### 1. Instalación de Python y Dependencias

```bash
# Verificar versión de Python
python --version

# Crear entorno virtual
python -m venv venv_mppe_ipasme

# Activar entorno virtual
# En Windows:
venv_mppe_ipasme\Scripts\activate
# En Linux/macOS:
source venv_mppe_ipasme/bin/activate

# Instalar dependencias
pip install pandas mysql-connector-python
```

### 2. Instalación de MySQL

#### En Windows:
1. Descargar MySQL Installer desde [mysql.com](https://dev.mysql.com/downloads/installer/)
2. Ejecutar el instalador y seleccionar "Server only"
3. Configurar contraseña para el usuario root
4. Completar la instalación

#### En Ubuntu:
```bash
sudo apt update
sudo apt install mysql-server
sudo mysql_secure_installation
```

#### En macOS:
```bash
brew install mysql
brew services start mysql
```

### 3. Configuración de Git

```bash
# Configurar usuario
git config --global user.name "Tu Nombre"
git config --global user.email "tu.email@ejemplo.com"

# Verificar configuración
git config --list
```

## Configuración de la Base de Datos

### 1. Crear Usuario y Base de Datos

```sql
-- Conectar como root
mysql -u root -p

-- Crear base de datos
CREATE DATABASE ValidacionIPASME_MPPE;

-- Crear usuario para el proyecto
CREATE USER 'mppe_user'@'localhost' IDENTIFIED BY 'password_seguro_123';

-- Otorgar permisos
GRANT ALL PRIVILEGES ON ValidacionIPASME_MPPE.* TO 'mppe_user'@'localhost';
FLUSH PRIVILEGES;

-- Verificar creación
SHOW DATABASES;
```

### 2. Ejecutar Scripts de Creación

```bash
# Navegar al directorio del proyecto
cd /ruta/al/proyecto/mppe_ipasme_project

# Ejecutar script de creación de tablas
mysql -u mppe_user -p ValidacionIPASME_MPPE < sql/create_database_and_tables.sql
```

### 3. Verificar Estructura

```sql
USE ValidacionIPASME_MPPE;
SHOW TABLES;
DESCRIBE dm1_fijos_contratados_mppe;
```

## Configuración de Google Drive

### 1. Crear Estructura de Carpetas

1. Acceder a [Google Drive](https://drive.google.com)
2. Crear carpeta principal: "Proyecto_MPPE_IPASME"
3. Crear subcarpetas según la estructura documentada:
   - 01_Datos_Originales
   - 02_Respaldos_BD
   - 03_Documentos_Procesados
   - 04_Scripts_Auxiliares

### 2. Configurar Permisos

1. **Para cada carpeta:**
   - Clic derecho → "Compartir"
   - Añadir colaboradores con permisos apropiados
   - Configurar enlaces de acceso

2. **Generar enlaces compartibles:**
   - Seleccionar archivo → "Obtener enlace"
   - Configurar como "Cualquier persona con el enlace"
   - Copiar enlace para documentación

### 3. Subir Archivos Iniciales

1. Subir archivos CSV/Excel a "01_Datos_Originales"
2. Crear archivo "metadata_archivos.txt" con información de los archivos
3. Documentar enlaces en archivo de configuración

## Implementación del Código

### 1. Clonar o Crear Repositorio

```bash
# Si es un nuevo proyecto:
mkdir mppe_ipasme_project
cd mppe_ipasme_project
git init

# Si clonando repositorio existente:
git clone https://github.com/tu-usuario/mppe_ipasme_project.git
cd mppe_ipasme_project
```

### 2. Configurar Estructura de Archivos

```bash
# Crear estructura de directorios
mkdir -p docs src/python sql data

# Copiar archivos del proyecto
# (Los archivos ya están creados en este proyecto)
```

### 3. Configurar Variables de Entorno

```bash
# Crear archivo .env
cat > .env << EOF
DB_HOST=localhost
DB_USER=mppe_user
DB_PASSWORD=password_seguro_123
DB_NAME=ValidacionIPASME_MPPE
EOF

# Añadir .env al .gitignore
echo ".env" >> .gitignore
```

## Importación de Datos

### 1. Preparar Archivos de Datos

```bash
# Crear directorio de datos
mkdir -p data

# Descargar archivos desde Google Drive
# (Usar enlaces generados anteriormente)
```

### 2. Modificar Script de Importación

```python
# Editar src/python/import_data.py
# Actualizar rutas de archivos y configuración de base de datos

# Ejemplo de configuración:
DB_CONFIG = {
    'host': 'localhost',
    'user': 'mppe_user',
    'password': 'password_seguro_123',
    'database': 'ValidacionIPASME_MPPE'
}
```

### 3. Ejecutar Importación

```bash
# Activar entorno virtual
source venv_mppe_ipasme/bin/activate

# Ejecutar script de importación
python src/python/import_data.py
```

### 4. Verificar Importación

```sql
-- Conectar a la base de datos
mysql -u mppe_user -p ValidacionIPASME_MPPE

-- Verificar datos importados
SELECT COUNT(*) FROM dm1_fijos_contratados_mppe;
SELECT status_empleado, COUNT(*) FROM dm1_fijos_contratados_mppe GROUP BY status_empleado;
```

## Configuración de Notion

### 1. Crear Workspace

1. Acceder a [Notion](https://notion.so)
2. Crear nuevo workspace: "Proyecto MPPE-IPASME"
3. Invitar colaboradores necesarios

### 2. Implementar Estructura de Páginas

1. **Crear página principal** usando la plantilla en `docs/notion_documentation_template.md`
2. **Crear subpáginas** para cada sección
3. **Personalizar enlaces** con URLs reales del proyecto

### 3. Configurar Integraciones

1. **Integrar con Google Drive:**
   - Añadir widgets de Google Drive
   - Enlazar archivos directamente

2. **Integrar con GitHub:**
   - Añadir enlaces al repositorio
   - Configurar notificaciones de commits

## Configuración de GitHub

### 1. Crear Repositorio

```bash
# Inicializar repositorio local
git add .
git commit -m "Configuración inicial del proyecto MPPE-IPASME"

# Crear repositorio en GitHub y conectar
git remote add origin https://github.com/tu-usuario/mppe_ipasme_project.git
git push -u origin main
```

### 2. Configurar README y Documentación

1. **Actualizar README.md** con enlaces reales
2. **Añadir badges** de estado del proyecto
3. **Configurar GitHub Pages** para documentación (opcional)

### 3. Configurar Issues y Projects

1. **Crear templates** para issues
2. **Configurar project board** para seguimiento
3. **Añadir labels** para categorización

## Pruebas y Validación

### 1. Pruebas de Conectividad

```bash
# Probar conexión a base de datos
python -c "
import mysql.connector
try:
    conn = mysql.connector.connect(
        host='localhost',
        user='mppe_user',
        password='password_seguro_123',
        database='ValidacionIPASME_MPPE'
    )
    print('✅ Conexión exitosa a la base de datos')
    conn.close()
except Exception as e:
    print(f'❌ Error de conexión: {e}')
"
```

### 2. Pruebas de Integridad de Datos

```sql
-- Ejecutar consultas de validación
source sql/example_queries.sql

-- Verificar integridad referencial
SELECT COUNT(*) FROM dm1_fijos_contratados_mppe WHERE cedula IS NULL;
SELECT COUNT(*) FROM dm1_fijos_contratados_mppe WHERE cedula = '';
```

### 3. Pruebas de Rendimiento

```python
# Script de prueba de rendimiento
import time
import mysql.connector

start_time = time.time()

# Ejecutar consulta compleja
conn = mysql.connector.connect(
    host='localhost',
    user='mppe_user',
    password='password_seguro_123',
    database='ValidacionIPASME_MPPE'
)

cursor = conn.cursor()
cursor.execute("SELECT COUNT(*) FROM dm1_fijos_contratados_mppe")
result = cursor.fetchone()

end_time = time.time()
print(f"Consulta ejecutada en {end_time - start_time:.2f} segundos")
print(f"Total de registros: {result[0]}")

conn.close()
```

## Puesta en Producción

### 1. Configuración de Seguridad

```sql
-- Crear usuario de solo lectura para consultas externas
CREATE USER 'consulta_externa'@'%' IDENTIFIED BY 'password_consulta_123';
GRANT SELECT ON ValidacionIPASME_MPPE.* TO 'consulta_externa'@'%';

-- Configurar SSL (recomendado)
-- Seguir documentación oficial de MySQL para SSL
```

### 2. Configuración de Respaldos Automáticos

```bash
# Crear script de respaldo
cat > backup_script.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups"
DB_NAME="ValidacionIPASME_MPPE"

mkdir -p $BACKUP_DIR

mysqldump -u mppe_user -p$DB_PASSWORD $DB_NAME > $BACKUP_DIR/backup_$DATE.sql
gzip $BACKUP_DIR/backup_$DATE.sql

# Limpiar respaldos antiguos (mantener últimos 30 días)
find $BACKUP_DIR -name "backup_*.sql.gz" -mtime +30 -delete

echo "Respaldo completado: backup_$DATE.sql.gz"
EOF

chmod +x backup_script.sh

# Configurar cron para respaldos automáticos
crontab -e
# Añadir línea: 0 2 * * * /ruta/al/backup_script.sh
```

### 3. Monitoreo y Alertas

```python
# Script de monitoreo básico
import mysql.connector
import smtplib
from email.mime.text import MIMEText

def check_database_health():
    try:
        conn = mysql.connector.connect(
            host='localhost',
            user='mppe_user',
            password='password_seguro_123',
            database='ValidacionIPASME_MPPE'
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM dm1_fijos_contratados_mppe")
        count = cursor.fetchone()[0]
        
        if count == 0:
            send_alert("Base de datos vacía detectada")
        
        conn.close()
        return True
        
    except Exception as e:
        send_alert(f"Error de conexión a base de datos: {e}")
        return False

def send_alert(message):
    # Configurar envío de alertas por email
    pass

# Ejecutar verificación
if __name__ == "__main__":
    check_database_health()
```

## Mantenimiento

### 1. Rutinas Diarias

- Verificar logs de aplicación
- Monitorear espacio en disco
- Revisar conexiones activas a la base de datos

### 2. Rutinas Semanales

- Ejecutar respaldos manuales adicionales
- Revisar rendimiento de consultas
- Actualizar documentación si hay cambios

### 3. Rutinas Mensuales

- Auditar accesos a Google Drive
- Revisar y actualizar permisos
- Analizar métricas de uso del sistema
- Actualizar dependencias de Python

### 4. Rutinas Trimestrales

- Revisar y actualizar documentación completa
- Evaluar necesidades de escalabilidad
- Realizar pruebas de recuperación de desastres
- Revisar políticas de seguridad

## Solución de Problemas Comunes

### Error de Conexión a MySQL

```bash
# Verificar estado del servicio
sudo systemctl status mysql

# Reiniciar servicio si es necesario
sudo systemctl restart mysql

# Verificar puertos
netstat -tlnp | grep 3306
```

### Error de Importación de Datos

```python
# Verificar encoding del archivo CSV
import chardet

with open('data/archivo.csv', 'rb') as f:
    result = chardet.detect(f.read())
    print(f"Encoding detectado: {result['encoding']}")
```

### Problemas de Rendimiento

```sql
-- Añadir índices para mejorar rendimiento
CREATE INDEX idx_cedula ON dm1_fijos_contratados_mppe(cedula);
CREATE INDEX idx_status ON dm1_fijos_contratados_mppe(status_empleado);

-- Analizar consultas lentas
SHOW PROCESSLIST;
```

## Contacto y Soporte

Para soporte técnico o consultas sobre la implementación:

- **Documentación:** Revisar archivos en `docs/`
- **Issues:** Crear issue en GitHub del proyecto
- **Notion:** Utilizar comentarios en páginas de Notion
- **Email:** [Configurar email de contacto del proyecto]

---

**Nota:** Esta guía debe actualizarse conforme evolucione el proyecto. Mantener siempre la versión más reciente en el repositorio GitHub y en la documentación de Notion.

